generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?

  // Auth
  passwordHash      String?
  role              String    @default("user")

  accounts          Account[]
  sessions          Session[]

  projectsOwned     Project[] @relation("OwnerProjects")
  memberships       ProjectMember[]
  documentAssignments DocumentAssignee[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?     @map("expiresAt")
  token_type        String?  @map("tokenType")
  scope             String?
  id_token          String?  @map("idToken")
  session_state     String?  @map("sessionState")

  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String          @id @default(cuid())
  title       String
  description String?
  status      String          @default("Draft")
  coverImage  String?
  ownerId     String
  owner       User            @relation("OwnerProjects", fields: [ownerId], references: [id])

  members     ProjectMember[]
  documents   ProjectDocument[]
  contract    Contract?
  parties     KYCParty[]
  signatures  Signature[]

  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ProjectMember {
  id        String  @id @default(cuid())
  userId    String
  projectId String
  role      String  @default("member")

  user      User    @relation(fields: [userId], references: [id])
  project   Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model ProjectDocument {
  id          String   @id @default(cuid())
  projectId   String
  title       String
  status      String   @default("Planning")
  startDate   DateTime?
  endDate     DateTime?
  totalHours  Int      @default(0)
  comments    String?

  project     Project  @relation(fields: [projectId], references: [id])
  assignees   DocumentAssignee[]
  screenshots Screenshot[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DocumentAssignee {
  id           String          @id @default(cuid())
  documentId   String
  userId       String
  document     ProjectDocument @relation(fields: [documentId], references: [id])
  user         User            @relation(fields: [userId], references: [id])

  @@unique([documentId, userId])
}

model Contract {
  id               String   @id @default(cuid())
  projectId        String   @unique
  content          String   // Filled markdown text
  clientSignedAt   DateTime?
  providerSignedAt DateTime?
  clientSignature  String?  // dataURL
  providerSignature String? // dataURL

  project          Project  @relation(fields: [projectId], references: [id])
}

model KYCParty {
  id         String       @id @default(cuid())
  projectId  String
  role       String
  name       String
  email      String?
  phone      String?
  rfc        String?      // Fiscal ID if company or freelancer
  address    String?
  isCompany  Boolean      @default(false)

  project    Project      @relation(fields: [projectId], references: [id])
  idDocs     IDDocument[]
  proofs     ProofOfAddress[]
  signatures Signature[]

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model IDDocument {
  id          String       @id @default(cuid())
  partyId     String
  type        String       @default("INE")
  frontPath   String?
  backPath    String?
  extracted   String?      // JSON string of parsed fields

  party       KYCParty     @relation(fields: [partyId], references: [id])
}

model ProofOfAddress {
  id        String   @id @default(cuid())
  partyId   String
  imagePath String

  party     KYCParty @relation(fields: [partyId], references: [id])
}

model Signature {
  id        String   @id @default(cuid())
  partyId   String?
  projectId String?
  imageData String   // dataURL from canvas
  signedAt  DateTime @default(now())

  party     KYCParty? @relation(fields: [partyId], references: [id])
  project   Project?  @relation(fields: [projectId], references: [id])
}
 
model Screenshot {
  id         String          @id @default(cuid())
  documentId String
  imagePath  String
  capturedAt DateTime        @default(now())

  document   ProjectDocument @relation(fields: [documentId], references: [id])
}
 
